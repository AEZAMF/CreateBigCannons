plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    // mavens for Fabric-exclusives
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
    maven { url = "https://cursemaven.com" } // Forge Config API Port
    maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
    common(project(path: ":common", configuration: "namedElements")) {
        transitive = false
        exclude(group: "com.simibubi.create") // exclude Create Fabric used in common
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
        exclude(group: "com.simibubi.create") // exclude Create Fabric used in common
    }

    // dependencies
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

    // Create and its dependencies
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}") {
        exclude(group: "dev.emi")
    }
    modImplementation("com.tterrag.registrate_fabric:Registrate:${registrate_fabric_version}")
    modImplementation("com.jozufozu.flywheel:flywheel-fabric-${flywheel_fabric_minecraft_version}:${flywheel_fabric_version}")

    modImplementation("io.github.fabricators_of_create:Porting-Lib:${port_lib_version}+${minecraft_version}")
    modImplementation("me.alphamode:ForgeTags:${forge_tags_version}")
    modImplementation("com.electronwill.night-config:core:${night_config_core_version}")
    modImplementation("com.electronwill.night-config:toml:${night_config_toml_version}")
    modImplementation("curse.maven:forge-config-api-port-fabric-547434:${config_api_id}") { transitive = false }
    modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${reach_entity_attributes_version}")
    modImplementation("io.github.tropheusj:milk-lib:${milk_lib_version}")
    modImplementation("me.luligabi:NoIndium:${no_indium_version}")
    implementation("com.google.code.findbugs:jsr305:${jsr305_version}")

    // Development QOL
    modLocalRuntime("maven.modrinth:lazydfu:0.1.2")
    modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")
    modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}") { transitive = false }
    modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") { transitive = false } // for REI
    modLocalRuntime("dev.architectury:architectury-fabric:${architectury_version}") // for REI
    modLocalRuntime("me.shedaniel.cloth:basic-math:0.6.0") { transitive = false } // for REI
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
